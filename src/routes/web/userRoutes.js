"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const authMiddleware_1 = require("./../../middleware/authMiddleware");
const express_1 = __importDefault(require("express"));
const UserController_1 = require("./../../controllers/web/UserController");
const UserLeaveController_1 = require("./../../controllers/web/UserLeaveController");
const AttendanceController_1 = require("../../controllers/web/AttendanceController");
const HolidaysController_1 = require("../../controllers/web/HolidaysController");
const RecruitmentController_1 = require("../../controllers/admin/RecruitmentController");
const DepartmentsController_1 = require("../../controllers/admin/DepartmentsController");
const MemberController_1 = require("../../controllers/admin/MemberController");
const PayrollController_1 = require("../../controllers/admin/PayrollController");
const usersRoute = express_1.default.Router();
usersRoute.post("/register", UserController_1.usersRegistration);
usersRoute.post("/login", UserController_1.loginUser);
usersRoute.get('/all-users', authMiddleware_1.verifyToken, UserController_1.getAllUsers);
usersRoute.put('/approve-user/:userId', authMiddleware_1.verifyToken, UserController_1.approveUser);
usersRoute.get('/profile', authMiddleware_1.verifyToken, UserController_1.getUserProfile);
usersRoute.post('/logout', authMiddleware_1.verifyToken, UserController_1.logoutUser);
usersRoute.get('/get-all-usernames-with-id', authMiddleware_1.verifyToken, UserController_1.getAllUserNamesWithId);
usersRoute.post("/admingivenleave/:userId", authMiddleware_1.verifyToken, UserLeaveController_1.yearlyLeaving);
usersRoute.get("/leave-balance/:userId", authMiddleware_1.verifyToken, UserLeaveController_1.getUserLeaveBalance);
usersRoute.post("/userleaveapply/:userId", authMiddleware_1.verifyToken, UserLeaveController_1.applyLeave);
usersRoute.put("/leave-status/:id", authMiddleware_1.verifyToken, UserLeaveController_1.updateLeaveStatus);
usersRoute.get("/getallleaveapplication", authMiddleware_1.verifyToken, UserLeaveController_1.getAllLeaveRequestsWithUserInfo);
usersRoute.get("/get-approvedandrejected-leaverequests", authMiddleware_1.verifyToken, UserLeaveController_1.getApprovedAndRejectedLeaveRequests);
usersRoute.get("/get-single-leaverequest/:id", authMiddleware_1.verifyToken, UserLeaveController_1.getSingleLeaveRequestById);
usersRoute.get("/get-pending-leaverequests", authMiddleware_1.verifyToken, UserLeaveController_1.getPendingLeaveRequests);
usersRoute.get("/get-apply-leaves/:userId", authMiddleware_1.verifyToken, UserLeaveController_1.getUserapplyLeaves);
// userAttendance
usersRoute.post("/add-user-attendance", authMiddleware_1.verifyToken, AttendanceController_1.addUserAttendance);
usersRoute.post("/attendance-punchout", authMiddleware_1.verifyToken, AttendanceController_1.punchOutAttendance);
usersRoute.get("/get-attendance/:userId", authMiddleware_1.verifyToken, AttendanceController_1.getUserAttendanceById);
usersRoute.post("/request-miss-punchout/:userId", authMiddleware_1.verifyToken, AttendanceController_1.RequestMissPunchOut);
usersRoute.put("/approve-miss-punchout/:requestId", authMiddleware_1.verifyToken, AttendanceController_1.ApproveMissPunchOut);
usersRoute.get("/view-miss-punchout-request/:requestId", authMiddleware_1.verifyToken, AttendanceController_1.ViewMissPunchout);
// Holiday
usersRoute.post("/add-holidays", authMiddleware_1.verifyToken, HolidaysController_1.addHoliday);
usersRoute.get("/get-all-holiday", authMiddleware_1.verifyToken, HolidaysController_1.getAllHolidays);
//  Recruitment
usersRoute.post("/add-job", authMiddleware_1.verifyToken, RecruitmentController_1.addJob);
usersRoute.get("/get-all-jobs", authMiddleware_1.verifyToken, RecruitmentController_1.getAllJobs);
usersRoute.get("/getjobdetails/:id", authMiddleware_1.verifyToken, RecruitmentController_1.getJobById);
usersRoute.put("/edit-jobs/:id", authMiddleware_1.verifyToken, RecruitmentController_1.EditJob);
usersRoute.patch("/activejob/:id", authMiddleware_1.verifyToken, RecruitmentController_1.activateJob);
usersRoute.patch("/deactivatejob/:id", authMiddleware_1.verifyToken, RecruitmentController_1.deactivateJob);
usersRoute.get("/get-active-jobs", authMiddleware_1.verifyToken, RecruitmentController_1.getActiveJobs);
// Department
usersRoute.post("/add-department", authMiddleware_1.verifyToken, DepartmentsController_1.addDepartment);
usersRoute.get("/get-all-departments", authMiddleware_1.verifyToken, DepartmentsController_1.getAllDepartments);
usersRoute.put("/update-department/:id", authMiddleware_1.verifyToken, DepartmentsController_1.updateDepartment);
usersRoute.get("/get-department-by-id/:id", authMiddleware_1.verifyToken, DepartmentsController_1.getDepartmentById);
usersRoute.get("/get-all-departments-title", authMiddleware_1.verifyToken, DepartmentsController_1.getAllDepartmentsTitle);
usersRoute.post("/add-department-members", authMiddleware_1.verifyToken, MemberController_1.addDepartmentMembers);
usersRoute.get("/get-users-dy-department-id/:id", authMiddleware_1.verifyToken, MemberController_1.getUsersByDepartment);
usersRoute.get("/get-users-by-departmentid/:departmentId", authMiddleware_1.verifyToken, UserController_1.getUsersByDepartmentId);
usersRoute.put("/update-department-status/:id", authMiddleware_1.verifyToken, DepartmentsController_1.UpdateDepartmentStatus);
usersRoute.put("/change-department", authMiddleware_1.verifyToken, DepartmentsController_1.changeUserDepartment);
usersRoute.put("/user-promotion/:id", authMiddleware_1.verifyToken, PayrollController_1.updateUserPromotion);
usersRoute.get("/get-all-promotions/:id", authMiddleware_1.verifyToken, PayrollController_1.getPromotionsByUserId);
exports.default = usersRoute;
